#!/usr/bin/env ruby

config = {
  data_dir: nil,
  command: nil,
  binary: nil,
}

def usage(error=nil)
  puts "usage: #{File.basename($0)} -D <data dir> <command>"
  puts "commands:"
  puts "  setup                 setup <data dir>"
  puts "  pgpool                start pgpool as a daemon process"
  puts "  pgpool stop           stop  pgpool daemon process"
  puts "  pgpool -n             start pgpool as a foreground process"
  puts "  pg_ctl start          start postgres server as a daemon process"
  puts "  pg_ctl stop           stop  postgres server daemon process"
  puts "  postgres              start postgres server as a foreground process"
  puts ""
  puts "error: #{error}" if error
  exit 0
end

config_key = false

arg_offset = 0
ARGV.each_with_index do |a,i|
  arg_offset = i + 1

  if config_key
    config[config_key] = a
    config_key = nil
    next
  end

  case a
  when "-D"
    config_key = :data_dir
  when "-h", "-?", "--help"
    config[:command] = :help
  when "setup"
    config[:command] = :setup
  when "pgpool"
    config[:command] = :pgpool
    break
  when "pg_ctl"
    config[:command] = :pg_ctl
    break
  when "postgres"
    config[:command] = :postgres
    break
  end
end

usage nil if config_key
usage nil unless config[:command]

args = ARGV[arg_offset..-1]

setup_params = {
 port: 9900,
 backend_port: 6432,
 pgpool_pid_file: nil,
 pgpool_status_dir: nil,
 unix_socket_directory: nil,
}

case config[:command]
when :help
  usage nil

when :setup
  unless config[:data_dir]
    usage "-D option is required"
  end
  unless args.empty?
    usage nil
  end

  require "erb"
  require "fileutils"

  def run_setup_command(cmdline)
    puts "setup> #{cmdline.join(' ')}"
    system *cmdline
    unless $?.success?
      puts "** setup command failed **"
      exit 1
    end
  end

  config_src_dir = File.join(File.dirname(__FILE__), "..", "config")

  puts "Setting up '#{config[:data_dir]}'..."
  data_dir = File.expand_path(config[:data_dir])

  @config = setup_params  # used by erb files
  @config[:pgpool_pid_file] = File.join(data_dir, "run", "pgpool.pid")
  @config[:pgpool_status_dir] = File.join(data_dir, "run")
  @config[:unix_socket_directory] = File.join(data_dir, "run")

  # log & socket dirs
  FileUtils.mkdir_p File.join(data_dir, "log")
  FileUtils.mkdir_p File.join(data_dir, "run")

  # pgpool
  FileUtils.mkdir_p File.join(data_dir, "pgpool")
  %w[pcp.conf.sample pgpool.conf pool_hba.conf.sample pool_passwd].each do |fname|
    File.open(File.join(data_dir, "pgpool", fname), "w") {|f|
      f.write ERB.new(File.read(File.join(config_src_dir, fname))).result
    }
  end

  # postgresql
  run_setup_command %w[initdb -U pg --no-locale -E UNICODE] + [File.join(data_dir, "postgres")]
  File.open(File.join(data_dir, "postgres", "postgresql.conf"), "a") {|f|
    f.write ERB.new(File.read(File.join(config_src_dir, "postgresql.conf"))).result
  }

  puts <<EOF
************************************************************
**         PostgreSQL protocol gateway for Presto         **
************************************************************

           +------------+   +------------+   +--------+
  client ---> pgpool-II ----> PostgreSQL ----> Presto |
           +------------+   +------------+   +--------+
           rewrite query     proxy           run query

You can run queries on Presto as following:

  * Modify pgpool-II setting if necessary:
    #{config[:data_dir]}/pgpool/pgpool.conf

  * Modify PostgreSQL setting if necessary:
    #{config[:data_dir]}/postgres/postgresql.conf

  * Start pgpool-II:
    #{$0} -D "#{config[:data_dir]}" pgpool
    (stop> #{$0} -D "#{config[:data_dir]}" pgpool stop)

  * Start PostgreSQL:
    #{$0} -D "#{config[:data_dir]}" pg_ctl start
    (stop> #{$0} -D "#{config[:data_dir]}" pg_ctl stop)

  * Connect to pgpool-II:
    psql -h localhost -p #{setup_params[:port]}-U pg  postgres

EOF

else
  require "presto_pggw_config"

  if config[:command] == :pgpool
    prefix = PrestoPGGW::CONFIG["prefix"]
    binary = File.join(prefix, "bin", config[:command].to_s)
  else
    # TODO configurable postgres install prefix (by ENV?)
    binary = config[:command].to_s
  end

  data_dir = config[:data_dir]
  case config[:command]
  when :pgpool
    args = ["--pcp-file", File.join(data_dir, "pgpool", "pcp.conf")].concat(args)
    args = ["--hba-file", File.join(data_dir, "pgpool", "pool_hba.conf")].concat(args)
    args = ["--config-file", File.join(data_dir, "pgpool", "pgpool.conf")].concat(args)
  when :pg_ctl
    args = ["-D", File.join(data_dir, "postgres")].concat(args)
    args = ["-l", File.join(data_dir, "log", "postgres.log")].concat(args)
  when :postgres
    args = ["-D", File.join(data_dir, "postgres")].concat(args)
  end

  exec binary, *args
  #system binary, *args
end

