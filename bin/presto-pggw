#!/usr/bin/env ruby

require 'optparse'

config = {
  data_dir: nil,
  command: nil,
  binary: nil,
}

def usage(error=nil)
  puts "usage: #{File.basename($0)} -D <data dir> <command>"
  puts "commands:"
  puts "  setup                 setup <data dir>"
  puts "  pgpool                start pgpool as a daemon process"
  puts "  pgpool stop           stop  pgpool daemon process"
  puts "  pgpool -m             start pgpool as a foreground process"
  puts "  pg_ctl start          start postgres server as a daemon process"
  puts "  pg_ctl stop           stop  postgres server daemon process"
  puts "  postgres              start postgres server as a foreground process"
  puts ""
  puts "error: #{error}" if error
  exit 0
end

config_key = false

arg_offset = 0
ARGV.each_with_index do |a,i|
  arg_offset = i + 1

  if config_key
    config[config_key] = a
    config_key = nil
    next
  end

  case a
  when '-D'
    config_key = :data_dir
  when '-h', '-?', '--help'
    config[:command] = :help
  when 'setup'
    config[:command] = :setup
  when 'pgpool'
    config[:command] = :pgpool
    break
  when 'pg_ctl'
    config[:command] = :pg_ctl
    break
  when 'postgres'
    config[:command] = :postgres
    break
  end
end

usage nil if config_key
usage nil unless config[:command]

args = ARGV[arg_offset..-1]

case config[:command]
when :help
  usage nil

when :setup
  data_dir = config[:data_dir]
  unless data_dir
    usage "-D option is required"
  end
  unless args.empty?
    usage nil
  end

  def run_setup_command(cmdline)
    puts "setup> #{cmdline.join(' ')}"
    system *cmdline
    unless $?.success?
      puts "** setup command failed **"
      exit 1
    end
  end

  require 'fileutils'

  puts "Setting up '#{data_dir}'..."
  FileUtils.mkdir_p File.join(data_dir, 'log')
  run_setup_command %w[initdb -U pg --no-locale -E UNICODE] + [File.join(data_dir, "postgres")]
  # TODO modify postgresql config file
  # TODO generate pgpool config files

else
  require 'presto_pggw_config'

  if config[:command] == :pgpool
    prefix = PrestoPGGW::CONFIG['prefix']
    binary = File.join(prefix, "bin", config[:command].to_s)
  else
    # TODO configurable postgres install prefix (by ENV?)
    binary = config[:command].to_s
  end

  data_dir = config[:data_dir]
  case config[:command]
  when :pgpool
    args = ['--pcp-file', File.join(data_dir, 'pgpool', 'pcp.conf')].concat(args)
    args = ['--hba-file', File.join(data_dir, 'pgpool', 'pool_hba.conf')].concat(args)
    args = ['--config-file', File.join(data_dir, 'pgpool', 'pgpool.conf')].concat(args)
  when :pg_ctl
    args = ['-D', File.join(data_dir, 'postgres')].concat(args)
    args = ['-l', File.join(data_dir, 'log', 'postgres.log')].concat(args)
  when :postgres
    args = ['-D', File.join(data_dir, 'postgres')].concat(args)
  end

  exec binary, *args
  #system binary, *args
end

